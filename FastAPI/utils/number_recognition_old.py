# -*- coding: utf-8 -*-
"""Number_Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--EVq-3n4JXcEI6BP18S6K4RdVLHIsUd
"""

import pandas as pd
import pickle

from tensorflow.keras.datasets import mnist

from sklearn.preprocessing import MinMaxScaler

from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.ensemble import VotingClassifier

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
print('->loaded mnist images.')
train_images_df = pd.DataFrame([img.flatten() for img in train_images])
print('->train df created.')
test_images_df = pd.DataFrame([img.flatten() for img in test_images])
print('->test df created.')

train_images_df['label'] = train_labels
test_images_df['label'] = test_labels

x_train = train_images_df.drop('label', axis=1)
y_train = train_images_df['label']

x_test = test_images_df.drop('label', axis=1)
y_test = test_images_df['label']

scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

"""KNN Classifier"""

KNN_model = KNeighborsClassifier(n_neighbors=3)
KNN_model.fit(x_train, y_train)
# KNN_y_pred = KNN_model.predict(x_test)
# print(f'KNN Accuracy Score: {accuracy_score(y_test, KNN_y_pred)}')

"""Naive Bayes Classifier"""

NB_model = GaussianNB()
NB_model.fit(x_train, y_train)
# NB_y_pred = NB_model.predict(x_test)
# print(f'Naive Bayes Accuracy: {accuracy_score(y_test, NB_y_pred)}')

"""XGBoost Classifier"""

XGB_model = XGBClassifier()
XGB_model.fit(x_train, y_train)
# XGB_y_pred = XGB_model.predict(x_test)
# print(f'xgboost accuracy: {accuracy_score(y_test, XGB_y_pred)}')

"""SVC Classifier"""

SVC_model = SVC()
SVC_model.fit(x_train, y_train)
# SVC_y_pred = SVC_model.predict(x_test)
# print(f'support vector classifier accuracy: {accuracy_score(y_test, SVC_y_pred)}')

"""Random Forest Classifier"""

RF_model = RandomForestClassifier()
RF_model.fit(x_train, y_train)
# RF_y_pred = RF_model.predict(x_test)
# print(f'random forest classifier accuracy: {accuracy_score(y_test, RF_y_pred)}')

"""Voting Classifier"""

modelA = KNeighborsClassifier(n_neighbors=3)
modelB = GaussianNB()

VC_model = VotingClassifier(estimators=[('lr', modelA), ('dt', modelB)], voting='hard')
VC_model.fit(x_train,y_train)
VC_model.score(x_test,y_test)
# VC_y_pred = VC_model.predict(x_test)
# print(f'random forest classifier accuracy: {accuracy_score(y_test, VC_y_pred)}')

"""Export models"""

with open('models/KNN_model.pkl', 'wb') as f:
    pickle.dump(KNN_model, f)

with open('models/NB_model.pkl', 'wb') as f:
    pickle.dump(NB_model, f)

with open('models/XGB_model.pkl', 'wb') as f:
    pickle.dump(XGB_model, f)

with open('models/SVC_model.pkl', 'wb') as f:
    pickle.dump(SVC_model, f)

with open('models/RF_model.pkl', 'wb') as f:
    pickle.dump(RF_model, f)

with open('models/VC_model.pkl', 'wb') as f:
    pickle.dump(VC_model, f)